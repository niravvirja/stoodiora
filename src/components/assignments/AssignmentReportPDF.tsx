import { Document, Page, Text, View } from '@react-pdf/renderer';
import { SharedPDFHeader, SharedPDFFooter, SimpleTable, sharedStyles } from '@/components/pdf/SharedPDFLayout';
import { format } from 'date-fns';
import { getEventStatus } from '@/lib/event-status-utils';

interface AssignmentReportPDFProps {
  assignments: any[];
  firmData?: {
    name: string;
    description?: string;
    logo_url?: string;
    header_left_content?: string;
    footer_content?: string;
  };
  generatedBy: string;
}

const AssignmentReportPDF = ({ assignments, firmData, generatedBy }: AssignmentReportPDFProps) => {
  const currentDate = format(new Date(), 'dd MMM yyyy, hh:mm a');
  
  // Sort assignments by date
  const sortedAssignments = [...assignments].sort((a, b) => {
    const dateA = new Date(a.day_date || a.event?.event_date || 0);
    const dateB = new Date(b.day_date || b.event?.event_date || 0);
    return dateB.getTime() - dateA.getTime();
  });

  // Prepare table data with status
  const tableData = sortedAssignments.map(assignment => {
    const status = assignment.event ? getEventStatus(assignment.event as any).label : 'N/A';
    return [
      assignment.event?.title || 'N/A',
      assignment.day_date 
        ? format(new Date(assignment.day_date), 'dd MMM yyyy')
        : assignment.event?.event_date 
          ? format(new Date(assignment.event.event_date), 'dd MMM yyyy')
          : 'N/A',
      assignment.role || 'N/A',
      assignment.event?.event_type || 'N/A',
      assignment.event?.client?.name || 'N/A',
      status
    ];
  });

  // Split assignments into chunks of 15 for better pagination
  const ROWS_PER_PAGE = 15;
  const assignmentChunks = [];
  for (let i = 0; i < tableData.length; i += ROWS_PER_PAGE) {
    assignmentChunks.push(tableData.slice(i, i + ROWS_PER_PAGE));
  }

  const hasAssignments = assignments.length > 0;

  return (
    <Document>
      {/* Page 1: Header + Summary Only */}
      <Page size="A4" style={sharedStyles.page}>
        <SharedPDFHeader firmData={firmData} />

        <Text style={sharedStyles.title}>Assignments Report</Text>

        <View style={sharedStyles.detailsContainer}>
          <View style={sharedStyles.column}>
            <Text style={sharedStyles.sectionTitle}>Report Information</Text>
            <View style={sharedStyles.detailRow}>
              <Text style={sharedStyles.detailLabel}>Generated:</Text>
              <Text style={sharedStyles.detailValue}>{currentDate}</Text>
            </View>
            <View style={sharedStyles.detailRow}>
              <Text style={sharedStyles.detailLabel}>Total Assignments:</Text>
              <Text style={sharedStyles.detailValue}>{assignments.length}</Text>
            </View>
            <View style={sharedStyles.detailRow}>
              <Text style={sharedStyles.detailLabel}>Generated By:</Text>
              <Text style={sharedStyles.detailValue}>{generatedBy}</Text>
            </View>
          </View>
        </View>
      </Page>

      {/* Assignment Tables - 15 rows per page */}
      {assignmentChunks.map((chunk, chunkIndex) => (
        <Page key={`assignment-${chunkIndex}`} size="A4" style={sharedStyles.page}>
          <Text style={sharedStyles.title}>
            Assignment Details {assignmentChunks.length > 1 ? `(Page ${chunkIndex + 1} of ${assignmentChunks.length})` : ''}
          </Text>
          
          <SimpleTable
            headers={['Event', 'Date', 'Role', 'Type', 'Client', 'Status']}
            rows={chunk}
          />

          {/* Add footer to the last content page */}
          {chunkIndex === assignmentChunks.length - 1 && (
            <>
              <View style={{ flex: 1 }} />
              <SharedPDFFooter firmData={firmData} />
            </>
          )}
        </Page>
      ))}

      {/* If no assignments, add footer to first page */}
      {!hasAssignments && (
        <>
          <View style={{ flex: 1 }} />
          <SharedPDFFooter firmData={firmData} />
        </>
      )}
    </Document>
  );
};

export default AssignmentReportPDF;
